/*
PEG.JS gramma for sqllogictest files as described at http://www.sqlite.org/sqllogictest/doc/trunk/about.wiki
*/

{
	function doInt(o) {
		return parseInt(o.join(""), 10);
  	}
}

start 
  = nl* l:limit c:command trim? 
  	{	
		c.skipif = l.skipif;
		c.onlyif = l.onlyif;
		return c;
	}

trim
  = ([\n\t ]*) 


command
  = statement 
  / query   
  / hash 
  / halt 
  


halt
	= "halt"i 
  		{	
	  		return {
	  					command:'halt'
	  				}	 
	  	}

hash
	= "hash-threshold" _ maxResponses:[0-9]+ 
  		{
  			return {
  						command: 'setThreshold', 
  						maxResponses: doInt(maxResponses)
  					} 
  		}

statement
  = expect:statementExpectation _* nl sql:sql 
  	{
  		return {
  					command: 'execute', 
  					expectSuccess: expect, 
 					sql:sql.trim(),
  					results: {type:'void'} 
  				}
  	}

statementExpectation
  = "statement"i ' ' v:statementOption {return v}

statementOption
  = "ok"i    {return true}
  / "error"i  {return false}


sql
  = result:	(
				t:(!delimitor .) {return t[1];}
			)* 
		delimitor {return result.join("");}
	/ !.

delimitor
	= '\n----' _*
	/ !.

query
  = queryMain:queryMain nl
    sql:sql 
    result:result?
    {
    	return {
			command: 'execute',
			expectSuccess: true,
			sql: sql.trim(),
			result: result
		}
    }

result
  =nl* result:resultVal{return result} 


resultVal
	= resultHash
	/ resultList
	/ resultVoid

resultHash
	= amount:$[0-9]+ 
		" values hashing to " 
		hash:alphanum 
		{
			return {
				type:'hash',
				amount: amount,
				hash:hash
			}
		}


resultList
	= list:(v:$[^\n]+ (nl/!.){if('NULL' === v){v = null};return v})+
	{
		return {
			type:'list',
			values: list
		}
	}
	
resultVoid
	= nl* !. {return {type:'void'}}
	

limit
  = c:queryInitCommand* 
  	{ 
  		var skipif = [];
  		var onlyif = [];
		for (var i = c.length - 1; i >= 0; i--) {
			if('skip' == c[i].type){
				skipif.push(c[i].val);
			} else if('only' == c[i].type){
				onlyif.push(c[i].val);
			}
		};
  		return {
					skipif:skipif,
					onlyif:onlyif
				}
  	}

queryInitCommand
  = "skipif"i ' ' v:alphanum _* nl {return {type:'skip', val: v.toLowerCase()}}
  / "onlyif"i ' ' v:alphanum _* nl {return {type:'only', val: v.toLowerCase()}}


queryMain
 = "query"i _ colInfo (_ sortInfo)? (_ label)? _*


skipif
  = "skipif"i _ alphanum


colInfo
  = [a-z]i+

sortInfo
  = "nosort"i
  / "rowsort"i
  / "valuesort"i 


label
	= $alphanum+

alphanum
	= $[a-z0-9_-]i+


nl
	= "\n"

_
	= ' '




